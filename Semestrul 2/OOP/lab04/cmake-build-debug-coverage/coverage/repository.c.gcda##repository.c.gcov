        -:    0:Source:/mnt/d/oop/lab03/repository.c
        -:    0:Graph:/mnt/d/oop/lab03/cmake-build-debug-coverage/CMakeFiles/lab03.dir/repository.c.gcno
        -:    0:Data:/mnt/d/oop/lab03/cmake-build-debug-coverage/CMakeFiles/lab03.dir/repository.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by raulo on 3/21/2024.
        -:    3://
        -:    4:
        -:    5:#include "repository.h"
        -:    6:
function creeaza_repository called 9 returned 100% blocks executed 100%
        9:    7:Repo* creeaza_repository() {
        9:    8:    Repo *repo_nou = (Repo*)malloc(sizeof(Repo));
        9:    9:    repo_nou->capacitate_maxima = 1024;
        9:   10:    repo_nou->lista_cheltuieli = (cheltuiala**)calloc(repo_nou->capacitate_maxima, sizeof(cheltuiala*));
        9:   11:    repo_nou->nr_cheltuieli = 0;
        -:   12:
        9:   13:    return repo_nou;
        9:   13-block  0
        -:   14:}
        -:   15:
function destroy_repository called 9 returned 100% blocks executed 100%
        9:   16:void destroy_repository(Repo* storage) {
       16:   17:    for(int i = 0; i < storage->nr_cheltuieli; i++) {
        9:   17-block  0
       16:   17-block  1
branch  0 taken 7
branch  1 taken 9 (fallthrough)
        7:   18:        destroy_cheltuiala(storage->lista_cheltuieli[i]);
        7:   18-block  0
call    0 returned 7
        -:   19:    }
        -:   20:
        9:   21:    free(storage->lista_cheltuieli);
        9:   22:    storage->capacitate_maxima = -1;
        9:   23:    storage->nr_cheltuieli = -1;
        -:   24:
        9:   25:    free(storage);
        9:   26:}
        -:   27:
function realocare_memorie called 1 returned 100% blocks executed 100%
        1:   28:Repo* realocare_memorie(Repo* storage) {
        -:   29:    // actualizare capacitate
        1:   30:    storage->capacitate_maxima += 256;
        -:   31:
        1:   32:    cheltuiala** lista_noua_cheltuieli = (cheltuiala**)malloc(sizeof(cheltuiala) * storage->capacitate_maxima);
        2:   33:    for(int i = 0; i < storage->nr_cheltuieli; i++) {
        1:   33-block  0
        2:   33-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   34:        lista_noua_cheltuieli[i] = storage->lista_cheltuieli[i];
        1:   34-block  0
        -:   35:    }
        1:   36:    free(storage->lista_cheltuieli);
        -:   37:
        1:   38:    storage->lista_cheltuieli = lista_noua_cheltuieli;
        -:   39:
        1:   40:    return storage;
        1:   40-block  0
        -:   41:}
        -:   42:
function get_cheltuiala_by_id called 15 returned 100% blocks executed 100%
       15:   43:cheltuiala* get_cheltuiala_by_id(Repo* storage, int id_cheltuiala) {
       15:   44:    cheltuiala* chelt = storage->lista_cheltuieli[id_cheltuiala];
       15:   45:    return chelt;
       15:   45-block  0
        -:   46:}
        -:   47:
function get_nr_cheltuieli called 31 returned 100% blocks executed 100%
       31:   48:int get_nr_cheltuieli(Repo* storage) {
       31:   49:    return storage->nr_cheltuieli;
       31:   49-block  0
        -:   50:}
        -:   51:
function get_capacitate_maxima called 8 returned 100% blocks executed 100%
        8:   52:int get_capacitate_maxima(Repo* storage) {
        8:   53:    return storage->capacitate_maxima;
        8:   53-block  0
        -:   54:}
        -:   55:
function adauga_cheltuiala_la_storage called 10 returned 100% blocks executed 100%
       10:   56:Repo* adauga_cheltuiala_la_storage(Repo* storage, cheltuiala* chelt) {
       10:   57:    storage->lista_cheltuieli[storage->nr_cheltuieli] = chelt;
       10:   58:    storage->nr_cheltuieli++;
       10:   59:    return storage;
       10:   59-block  0
        -:   60:}
        -:   61:
function set_cheltuiala_pe_pozitie called 4 returned 100% blocks executed 100%
        4:   62:Repo* set_cheltuiala_pe_pozitie(Repo* storage, cheltuiala* chelt, int id_position) {
        4:   63:    storage->lista_cheltuieli[id_position] = chelt;
        4:   64:    return storage;
        4:   64-block  0
        -:   65:}
        -:   66:
function delete_cheltuiala called 3 returned 100% blocks executed 100%
        3:   67:Repo* delete_cheltuiala(Repo* storage, int id_position) {
        3:   68:    if(id_position == storage->nr_cheltuieli - 1) {
        3:   68-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   69:        destroy_cheltuiala(storage->lista_cheltuieli[id_position]);
        2:   69-block  0
call    0 returned 2
        2:   70:        storage->nr_cheltuieli -= 1;
        2:   71:        return storage;
        -:   72:    }
        -:   73:
        -:   74:    // distrug cheltuiala care trebuie stearsa
        1:   75:    destroy_cheltuiala(storage->lista_cheltuieli[id_position]);
        1:   75-block  0
call    0 returned 1
        -:   76:    // translatez celelalte cheltuieli
        2:   77:    for(int i = id_position; i < storage->nr_cheltuieli - 1; i++) {
        2:   77-block  0
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   78:        cheltuiala* chelt = storage->lista_cheltuieli[i + 1];
        1:   79:        chelt->id_cheltuiala = chelt->id_cheltuiala - 1;
        1:   80:        storage->lista_cheltuieli[i] = chelt;
        1:   80-block  0
        -:   81:    }
        -:   82:
        -:   83:    // fac un nou pointer
        1:   84:    cheltuiala* chelt_ultimul = storage->lista_cheltuieli[storage->nr_cheltuieli - 1];
        -:   85:    // la pointerul de mai jos se da free() in momentul cand se creeaza cheltuiala
        1:   86:    char* tip_chelt = get_tip_cheltuiala(chelt_ultimul);
        1:   86-block  0
call    0 returned 1
        -:   87:
        1:   88:    cheltuiala* new_pointer_chelt = create_cheltuiala(
call    0 returned 1
        -:   89:            chelt_ultimul->id_cheltuiala,
        -:   90:            chelt_ultimul->nr_apartament,
        -:   91:            chelt_ultimul->suma_cheltuiala,
        -:   92:            tip_chelt
        -:   93:    );
        -:   94:    // asignez noul pointer la penultima pozitie
        1:   95:    storage->lista_cheltuieli[storage->nr_cheltuieli - 2] = new_pointer_chelt;
        -:   96:
        -:   97:    // distrug ultimul pointer din lista (practic sterg dublura)
        1:   98:    destroy_cheltuiala(chelt_ultimul);
call    0 returned 1
        -:   99:
        1:  100:    storage->nr_cheltuieli -= 1;
        1:  101:    return storage;
        -:  102:}
        -:  103:
function run_repository_tests called 1 returned 100% blocks executed 100%
        1:  104:void run_repository_tests() {
        1:  105:    test_storage_operations();
        1:  105-block  0
call    0 returned 1
        1:  106:    test_realocare_memorie();
call    0 returned 1
        1:  107:    test_set_cheltuiala_pe_pozitie();
call    0 returned 1
        1:  108:    test_delete_cheltuiala();
call    0 returned 1
        1:  109:}
        -:  110:
function test_storage_operations called 1 returned 100% blocks executed 78%
        1:  111:void test_storage_operations() {
        1:  112:    Repo* storage = creeaza_repository();
        1:  112-block  0
call    0 returned 1
        -:  113:
       1*:  114:    assert(get_nr_cheltuieli(storage) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  114-block  0
call    3 never executed
       1*:  115:    assert(get_capacitate_maxima(storage) == 1024);
        1:  115-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  115-block  1
call    3 never executed
        -:  116:
        1:  117:    char *tip = (char*)malloc(sizeof(char) * 32);
        1:  118:    strcpy(tip, "internet");
        1:  119:    cheltuiala* chelt = create_cheltuiala(0, 12, 250, tip);
        1:  119-block  0
call    0 returned 1
        -:  120:
        1:  121:    storage = adauga_cheltuiala_la_storage(storage, chelt);
call    0 returned 1
        1:  122:    cheltuiala* chelt_storage = get_cheltuiala_by_id(storage, 0);
call    0 returned 1
        -:  123:
       1*:  124:    assert(get_nr_cheltuieli(storage) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  124-block  0
call    3 never executed
       1*:  125:    assert(get_id_cheltuiala(chelt) == get_id_cheltuiala(chelt_storage));
        1:  125-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  125-block  1
call    4 never executed
       1*:  126:    assert(get_numar_apartament(chelt) == get_numar_apartament(chelt_storage));
        1:  126-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  126-block  1
call    4 never executed
        -:  127:
        -:  128:    //destroy_cheltuiala(chelt_storage);
        -:  129:
        1:  130:    destroy_repository(storage);
        1:  130-block  0
call    0 returned 1
        1:  131:}
        -:  132:
function test_realocare_memorie called 1 returned 100% blocks executed 80%
        1:  133:void test_realocare_memorie() {
        1:  134:    Repo* storage = creeaza_repository();
        1:  134-block  0
call    0 returned 1
        -:  135:
       1*:  136:    assert(get_nr_cheltuieli(storage) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  136-block  0
call    3 never executed
       1*:  137:    assert(get_capacitate_maxima(storage) == 1024);
        1:  137-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  137-block  1
call    3 never executed
        -:  138:
        1:  139:    char *tip = (char*)malloc(sizeof(char) * 32);
        1:  140:    strcpy(tip, "internet");
        1:  141:    cheltuiala* chelt = create_cheltuiala(0, 12, 250, tip);
        1:  141-block  0
call    0 returned 1
        -:  142:
        1:  143:    storage = adauga_cheltuiala_la_storage(storage, chelt);
call    0 returned 1
        -:  144:
        1:  145:    if(get_nr_cheltuieli(storage) > 0) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  146:        Repo* new_storage = realocare_memorie(storage);
        1:  146-block  0
call    0 returned 1
        -:  147:
       1*:  148:        assert(get_nr_cheltuieli(new_storage) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  148-block  0
call    3 never executed
       1*:  149:        assert(get_capacitate_maxima(new_storage) == (1024 + 256));
        1:  149-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  149-block  1
call    3 never executed
        -:  150:
        1:  151:        destroy_repository(new_storage);
        1:  151-block  0
call    0 returned 1
        -:  152:    }
        1:  153:}
        -:  154:
function test_set_cheltuiala_pe_pozitie called 1 returned 100% blocks executed 84%
        1:  155:void test_set_cheltuiala_pe_pozitie() {
        1:  156:    Repo* storage = creeaza_repository();
        1:  156-block  0
call    0 returned 1
        -:  157:
        1:  158:    char *tip = (char*)malloc(sizeof(char) * 32);
        1:  159:    strcpy(tip, "internet");
        1:  160:    cheltuiala* chelt = create_cheltuiala(0, 12, 250, tip);
call    0 returned 1
        -:  161:
        1:  162:    storage = set_cheltuiala_pe_pozitie(storage, chelt, 0);
call    0 returned 1
        -:  163:
        1:  164:    cheltuiala* chelt_from_storage = get_cheltuiala_by_id(storage, 0);
call    0 returned 1
       1*:  165:    assert(get_id_cheltuiala(chelt_from_storage) == get_id_cheltuiala(chelt));
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  165-block  0
call    4 never executed
       1*:  166:    assert(get_suma_cheltuiala(chelt) == get_suma_cheltuiala(chelt_from_storage));
        1:  166-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  166-block  1
call    4 never executed
       1*:  167:    assert(get_numar_apartament(chelt) == get_numar_apartament(chelt_from_storage));
        1:  167-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  167-block  1
call    4 never executed
        -:  168:
        1:  169:    destroy_cheltuiala(chelt);
        1:  169-block  0
call    0 returned 1
        -:  170:    //destroy_cheltuiala(chelt_from_storage);
        -:  171:
        1:  172:    destroy_repository(storage);
call    0 returned 1
        1:  173:}
        -:  174:
function test_delete_cheltuiala called 1 returned 100% blocks executed 84%
        1:  175:void test_delete_cheltuiala() {
        1:  176:    Repo* storage = creeaza_repository();
        1:  176-block  0
call    0 returned 1
        -:  177:
        1:  178:    char *tip = (char*)malloc(sizeof(char) * 32);
        1:  179:    strcpy(tip, "internet");
        1:  180:    cheltuiala* chelt1 = create_cheltuiala(0, 12, 250, tip);
call    0 returned 1
        1:  181:    storage = adauga_cheltuiala_la_storage(storage, chelt1);
call    0 returned 1
        -:  182:
        1:  183:    char *tip2 = (char*)malloc(sizeof(char) * 32);
        1:  184:    strcpy(tip2, "apa");
        1:  185:    cheltuiala* chelt2 = create_cheltuiala(1, 21, 342, tip2);
call    0 returned 1
        1:  186:    storage = adauga_cheltuiala_la_storage(storage, chelt2);
call    0 returned 1
        -:  187:
        1:  188:    storage = delete_cheltuiala(storage, 0);
call    0 returned 1
       1*:  189:    assert(get_nr_cheltuieli(storage) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  189-block  0
call    3 never executed
       1*:  190:    assert(get_id_cheltuiala(get_cheltuiala_by_id(storage, 0)) == 0);
        1:  190-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  190-block  1
call    4 never executed
        -:  191:
        1:  192:    storage = delete_cheltuiala(storage, 0);
        1:  192-block  0
call    0 returned 1
       1*:  193:    assert(get_nr_cheltuieli(storage) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  193-block  0
call    3 never executed
        -:  194:
        1:  195:    destroy_repository(storage);
        1:  195-block  0
call    0 returned 1
        1:  196:}
